package at.erp.light.view.model;

// Generated 24.11.2014 20:09:12 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Formula;

/**
 * OutgoingDelivery generated by hbm2java
 */
@Entity
@Table(name = "outgoing_delivery", schema = "public")
public class OutgoingDelivery implements java.io.Serializable {

	private int outgoingDeliveryId;
	private Organisation organisation;
	private Person lastEditor;
	private Integer deliveryNr;
	private Date date;
	private String comment;
	private Date updateTimestamp;
	private int archived;
	private int booked;
	private Set<OutgoingArticle> outgoingArticles = new HashSet<OutgoingArticle>(
			0);

	public OutgoingDelivery() {
	}

	public OutgoingDelivery(int outgoingDeliveryId, Organisation organisation,
			Person lastEditor, Date date, String comment, Date updateTimestamp, int archived) {
		this.outgoingDeliveryId = outgoingDeliveryId;
		this.organisation = organisation;
		this.lastEditor = lastEditor;
		this.date = date;
		this.comment = comment;
		this.updateTimestamp = updateTimestamp;
		this.archived = archived;
	}

	public OutgoingDelivery(int outgoingDeliveryId,
			Organisation organisation, Person lastEditor, Integer deliveryNr,
			Date date, String comment, Date updateTimestamp, int archived, Set<OutgoingArticle> outgoingArticles) {
		this.outgoingDeliveryId = outgoingDeliveryId;
		this.organisation = organisation;
		this.lastEditor = lastEditor;
		this.deliveryNr = deliveryNr;
		this.date = date;
		this.comment = comment;
		this.updateTimestamp = updateTimestamp;
		this.outgoingArticles = outgoingArticles;
		this.archived = archived;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="gen_outgoing_delivery_id")
	@SequenceGenerator(name="gen_outgoing_delivery_id", sequenceName="outgoing_delivery_outgoing_delivery_id_seq", allocationSize=1)
	@Column(name = "outgoing_delivery_id", unique = true, nullable = false)
	public int getOutgoingDeliveryId() {
		return this.outgoingDeliveryId;
	}

	public void setOutgoingDeliveryId(int outgoingDeliveryId) {
		this.outgoingDeliveryId = outgoingDeliveryId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "organisation_id", nullable = false)
	public Organisation getOrganisation() {
		return this.organisation;
	}

	public void setOrganisation(Organisation organisation) {
		this.organisation = organisation;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "person_id", nullable = false)
	public Person getLastEditor() {
		return this.lastEditor;
	}

	public void setLastEditor(Person lastEditor) {
		this.lastEditor = lastEditor;
	}

	@Column(name = "delivery_nr")
	public Integer getDeliveryNr() {
		return this.deliveryNr;
	}

	public void setDeliveryNr(Integer deliveryNr) {
		this.deliveryNr = deliveryNr;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date", nullable = false, length = 13)
	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	@Column(name = "comment", nullable = false, length = 1000)
	public String getComment() {
		return this.comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "update_timestamp", nullable = false, length = 13)
	public Date getUpdateTimestamp() {
		return this.updateTimestamp;
	}

	public void setUpdateTimestamp(Date updateTimestamp) {
		this.updateTimestamp = updateTimestamp;
	}

	// the entity is booked in a delivery_list if the field delivery_list_id contains a value 
	@Formula("(select CASE WHEN COALESCE(od.delivery_list_id, 0) = 0 THEN 0 "
			+ "WHEN COALESCE(od.delivery_list_id, 0) > 0 THEN 1 END "
			+ "from outgoing_delivery od where od.outgoing_delivery_id = outgoing_delivery_id)")
	public int getBooked() {
		return booked;
	}

	public void setBooked(int booked) {
		this.booked = booked;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "outgoingDelivery")
	@Cascade({CascadeType.ALL})
	public Set<OutgoingArticle> getOutgoingArticles() {
		return this.outgoingArticles;
	}

	public void setOutgoingArticles(Set<OutgoingArticle> outgoingArticles) {
		this.outgoingArticles = outgoingArticles;
	}

	@Column(name = "archived", nullable = false)
	public int getArchived() {
		return archived;
	}

	public void setArchived(int archived) {
		this.archived = archived;
	}
	
}
